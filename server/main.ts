import express, { Express } from "express";
import path from "path";
import { createSsrServer } from "vite-ssr/dev";
import { ConfigProvider, TrainQuery, trainQuery } from "./trainquery";
import { OnlineConfigProvider } from "./config/online-config-provider";
import { ExpressServer } from "./express-server";
import { ConsoleLogger } from "./console-logger";
import { parseIntThrow } from "@schel-d/js-utils";
import "dotenv/config";
import { OfflineConfigProvider } from "./config/offline-config-provider";
import { ssrAppPropsApi } from "./api/ssr-props-api";

createServer();

async function createServer() {
  const isProd = process.env.NODE_ENV == "production";
  const isOffline = process.argv.includes("offline");
  const port = process.env.PORT ?? "3000";

  const serveFrontend = async (ctx: TrainQuery, app: Express) => {
    if (isProd) {
      await setupProdServer(ctx, app);
    } else {
      await setupDevServer(app);
    }
  };

  await trainQuery(
    () => new ExpressServer(parseIntThrow(port), serveFrontend),
    getConfigProvider(isOffline),
    new ConsoleLogger()
  );
}

function getConfigProvider(isOffline: boolean): ConfigProvider {
  const canonicalUrl = process.env.URL;
  if (canonicalUrl == null) {
    throw new Error("URL environment variable not set.");
  }

  if (isOffline) {
    const zipOrFolderPath = process.env.CONFIG_OFFLINE;
    if (zipOrFolderPath == null) {
      throw new Error("CONFIG_OFFLINE environment variable not provided.");
    }
    return new OfflineConfigProvider(zipOrFolderPath, canonicalUrl);
  } else {
    const configUrl = process.env.CONFIG;
    if (configUrl == null) {
      throw new Error("CONFIG environment variable not provided.");
    }
    return new OnlineConfigProvider(configUrl, canonicalUrl);
  }
}

async function setupDevServer(app: Express) {
  // Create vite-ssr server in middleware mode.
  const viteServer = await createSsrServer({
    server: { middlewareMode: true },
    appType: "custom",
  });
  app.use(viteServer.middlewares);
}

async function setupProdServer(ctx: TrainQuery, app: Express) {
  const dist = `../dist`;

  // Serve static assets.
  const { ssr } = require(`${dist}/server/package.json`);
  for (const asset of ssr.assets || []) {
    const serverEndpoint = "/" + asset;
    const distFolderPath = path.join(__dirname, `${dist}/client/` + asset);
    app.use(serverEndpoint, express.static(distFolderPath));
  }

  // Render the pages, as generated by vite-ssr.
  const manifest = require(`${dist}/client/ssr-manifest.json`);
  const renderPage = (await import(`${dist}/server/main.js`)).default.default;
  app.get("*", async (req, res) => {
    const url = req.protocol + "://" + req.get("host") + req.originalUrl;

    const { html, status, statusText, headers } = await renderPage(url, {
      manifest,
      preload: true,
      request: req,
      response: res,
      initialState: { props: await ssrAppPropsApi(ctx) },
    });

    res.type("html");
    res.writeHead(status || 200, statusText || headers, headers);
    res.end(html);
  });
}
